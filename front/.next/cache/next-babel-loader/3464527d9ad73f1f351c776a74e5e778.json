{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(post);\n\nimport React from \"react\";\nimport { all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction addComment() {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction post() {\n  return _regeneratorRuntime.wrap(function post$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default post;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","post","React","all","fork","put","takeLatest","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","axios","action","delay","type","data","response","addCommentAPI"],"mappings":";;oDAeUA,O;qDAmBAC,U;qDAeAC,Y;qDAIAC,e;qDAIAC,I;;AAzDV,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,kBAPP;;AASA,SAASC,UAAT,GAAsB;AACpB,SAAOC,KAAK,CAACb,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUJ,OAAV,CAAkBkB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMX,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMP,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEP,gBADE;AAERQ,YAAAA,IAAI,EAAE,YAAMC,QAAN,CAAeD;AAFb,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASE,aAAT,GAAyB;AACvB,SAAON,KAAK,CAACb,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUH,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMkB,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMX,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAER;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMJ,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEV,mBADE;AAERW,YAAAA,IAAI,EAAE,aAAMC,QAAN,CAAeD;AAFb,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUnB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACK,gBAAD,EAAmBd,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACE,mBAAD,EAAsBV,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,GAAG,CAAC,CAACC,IAAI,CAACL,YAAD,CAAL,EAAqBK,IAAI,CAACJ,eAAD,CAAzB,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,IAAf","sourcesContent":["import React from \"react\";\nimport { all, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n} from \"../reducers/post\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(2000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* addComment() {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* post() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}