{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentLoading = _useSelector.addCommentLoading,\n      addCommentDone = _useSelector.addCommentDone;\n\n  var email = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.email;\n  });\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: email\n      }\n    });\n  }, [commentText, email]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: \"relative\",\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          position: \"absolute\",\n          right: 0,\n          bottom: -40,\n          zIndex: 9997\n        },\n        htmlType: \"submit\",\n        type: \"primary\",\n        loading: addCommentLoading,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommentForm, \"CAzSG1/4FhNhCd7fBi0xekx/sT8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/components/CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","PropTypes","useDispatch","useSelector","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","state","addCommentLoading","addCommentDone","email","user","me","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","id","userId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;;AAEA,SAASC,WAAT,OAA+B;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC7B,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAD6B,qBAEiBC,WAAW,CACvD,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACF,IAAjB;AAAA,GADuD,CAF5B;AAAA,MAErBG,iBAFqB,gBAErBA,iBAFqB;AAAA,MAEFC,cAFE,gBAEFA,cAFE;;AAK7B,MAAMC,KAAK,GAAGT,WAAW,CAAC,UAACM,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACI,IAAN,CAAWC,EAAtB,mDAAW,eAAeF,KAA1B;AAAA,GAAD,CAAzB;;AAL6B,kBAM8BR,QAAQ,CAAC,EAAD,CANtC;AAAA;AAAA,MAMtBW,WANsB;AAAA,MAMTC,mBANS;AAAA,MAMYC,cANZ;;AAQ7BjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,cAAJ,EAAoB;AAClBM,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACN,cAAD,CAJM,CAAT;AAMA,MAAMO,eAAe,GAAGnB,WAAW,CAAC,YAAM;AACxCS,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEd,mBADC;AAEPe,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAEN,WADL;AAEJO,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EAFT;AAGJC,QAAAA,MAAM,EAAEZ;AAHJ;AAFC,KAAD,CAAR;AAQD,GATkC,EAShC,CAACG,WAAD,EAAcH,KAAd,CATgC,CAAnC;AAWA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEM,eAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEO,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AACE,QAAA,KAAK,EAAEX,WADT;AAEE,QAAA,QAAQ,EAAEC,mBAFZ;AAGE,QAAA,IAAI,EAAE;AAHR;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAES,UAAAA,QAAQ,EAAE,UAAZ;AAAwBE,UAAAA,KAAK,EAAE,CAA/B;AAAkCC,UAAAA,MAAM,EAAE,CAAC,EAA3C;AAA+CC,UAAAA,MAAM,EAAE;AAAvD,SADT;AAEE,QAAA,QAAQ,EAAC,QAFX;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,OAAO,EAAEnB,iBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA5CQJ,W;UACUJ,W,EAC6BC,W,EAGhCA,W,EAC6CC,Q;;;KANpDE,W;AA8CTA,WAAW,CAACwB,SAAZ,GAAwB;AACtBvB,EAAAA,IAAI,EAAEN,SAAS,CAAC8B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAe1B,WAAf","sourcesContent":["import { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nfunction CommentForm({ post }) {\n  const dispatch = useDispatch();\n  const { addCommentLoading, addCommentDone } = useSelector(\n    (state) => state.post\n  );\n  const email = useSelector((state) => state.user.me?.email);\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: email,\n      },\n    });\n  }, [commentText, email]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item style={{ position: \"relative\", margin: 0 }}>\n        <Input.TextArea\n          value={commentText}\n          onChange={onChangeCommentText}\n          rows={4}\n        />\n        <Button\n          style={{ position: \"absolute\", right: 0, bottom: -40, zIndex: 9997 }}\n          htmlType=\"submit\"\n          type=\"primary\"\n          loading={addCommentLoading}\n        >\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}