{"ast":null,"code":"import { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport ButtonGroup from \"antd/lib/button/button-group\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PostCard({\n  post\n}) {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const liked = post.Likers.find(v => v.id === id);\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsx(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/_jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnLike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(ButtonGroup, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              loading: removePostLoading,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      extra: id && /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: [\" \", moment(post.createdAt).format(\"YYYY.MM.DD\")]\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: [\" \", moment(post.createdAt).format(\"YYYY.MM.DD\")]\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsx(Link, {\n              href: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsx(\"a\", {\n                children: /*#__PURE__*/_jsx(Avatar, {\n                  children: item.User.nickname[0]\n                })\n              })\n            }),\n            content: item.content\n          })\n        })\n      })]\n    })]\n  });\n}\n\nexport default PostCard;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/components/PostCard.js"],"names":["EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","HeartTwoTone","Link","moment","Avatar","Button","Card","Comment","List","Popover","ButtonGroup","React","useCallback","useEffect","useState","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","FollowButton","PostCard","post","dispatch","id","state","user","me","removePostLoading","commentFormOpened","setCommentFormOpened","liked","Likers","find","v","onLike","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","alert","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item"],"mappings":"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","sourcesContent":["import {\n  EllipsisOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  RetweetOutlined,\n  HeartTwoTone,\n} from \"@ant-design/icons\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport ButtonGroup from \"antd/lib/button/button-group\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport {\n  LIKE_POST_REQUEST,\n  REMOVE_POST_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\n\nfunction PostCard({ post }) {\n  const dispatch = useDispatch();\n  const id = useSelector((state) => state.user.me?.id);\n  const { removePostLoading } = useSelector((state) => state.post);\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const liked = post.Likers.find((v) => v.id === id);\n\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [id]);\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n          liked ? (\n            <HeartTwoTone\n              twoToneColor=\"#eb2f96\"\n              key=\"heart\"\n              onClick={onUnLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onLike} />\n          ),\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"more\"\n            content={\n              <ButtonGroup>\n                {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      onClick={onRemovePost}\n                      loading={removePostLoading}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </ButtonGroup>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        title={\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\n        }\n        extra={id && <FollowButton post={post} />}\n      >\n        {post.RetweetId && post.Retweet ? (\n          <Card\n            cover={\n              post.Retweet.Images[0] && (\n                <PostImages images={post.Retweet.Images} />\n              )\n            }\n          >\n            <div style={{ float: \"right\" }}>\n              {\" \"}\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n            </div>\n            <Card.Meta\n              avatar={\n                <Link href={`/user/${post.Retweet.User.id}`}>\n                  <a>\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              title={post.Retweet.User.nickname}\n              description={<PostCardContent postData={post.Retweet.content} />}\n            />\n          </Card>\n        ) : (\n          <>\n            <div style={{ float: \"right\" }}>\n              {\" \"}\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n            </div>\n            <Card.Meta\n              avatar={\n                <Link href={`/user/${post.User.id}`}>\n                  <a>\n                    <Avatar>{post.User.nickname[0]}</Avatar>\n                  </a>\n                </Link>\n              }\n              title={post.User.nickname}\n              description={<PostCardContent postData={post.content} />}\n            />\n          </>\n        )}\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link href={`/user/${item.User.id}`}>\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  );\n}\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}