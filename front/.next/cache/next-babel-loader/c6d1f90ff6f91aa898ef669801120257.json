{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(post);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            id: id,\n            content: action.content\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(removePostAPI);\n          console.log(action.data);\n          _context3.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction post() {\n  return _regeneratorRuntime.wrap(function post$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default post;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/sagas/post.js"],"names":["addPost","addComment","removePost","watchAddPost","watchAddComment","watchRemovePost","post","all","delay","fork","put","takeLatest","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","action","id","generate","type","content","data","console","log","response","addCommentAPI","removePostAPI"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      id,\n      content: action.content,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI);\n    console.log(action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* post() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}