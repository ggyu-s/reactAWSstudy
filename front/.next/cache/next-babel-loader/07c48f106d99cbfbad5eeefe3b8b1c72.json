{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\");\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`, data);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction unLikePostAPI(data) {\n  return axios.patch(`/post/${data}/unlike`);\n}\n\nfunction* unLikePost(action) {\n  try {\n    const result = yield call(unLikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLike() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLike() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePost);\n}\n\nfunction* post() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLike), fork(watchUnLike)]);\n}\n\nexport default post;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","error","response","addPostAPI","post","content","addPost","id","addCommentAPI","postId","addComment","removePostAPI","removePost","console","likePostAPI","patch","likePost","unLikePostAPI","unLikePost","watchLoadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLike","watchUnLike"],"mappings":"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","sourcesContent":["import {\n  all,\n  call,\n  delay,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\");\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`, data);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction unLikePostAPI(data) {\n  return axios.patch(`/post/${data}/unlike`);\n}\n\nfunction* unLikePost(action) {\n  try {\n    const result = yield call(unLikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLike() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLike() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unLikePost);\n}\n\nfunction* post() {\n  yield all([\n    fork(watchLoadPosts),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLike),\n    fork(watchUnLike),\n  ]);\n}\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}