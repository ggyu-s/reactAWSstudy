{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PostForm() {\n  var imageInput = useRef();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addPostDone = _useSelector.addPostDone,\n      addPostLoading = _useSelector.addPostLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector2.imagePaths;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onClickImageUpload = useCallback(function (e) {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImage = useCallback(function (e) {\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uD3EC\\uC2A4\\uD2B8 \\uC785\\uB825\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImage\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          \"float\": \"right\"\n        },\n        htmlType: \"submit\",\n        loading: addPostLoading,\n        children: \"\\uB4F1\\uB85D\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths.map(function (v, i) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            display: \"inline-block\"\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: \"http://localhost:3065/\".concat(v),\n            style: {\n              width: \"200px\"\n            },\n            alt: v\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            })\n          })]\n        }, v);\n      })\n    })]\n  });\n}\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/components/PostForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useRef","useDispatch","useSelector","useInput","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","imageInput","dispatch","state","post","addPostDone","addPostLoading","imagePaths","text","onChangeText","setText","onSubmit","formData","FormData","forEach","p","append","type","data","onClickImageUpload","e","current","click","onChangeImage","imageFormData","call","target","files","f","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport {\n  ADD_POST_REQUEST,\n  REMOVE_IMAGE,\n  UPLOAD_IMAGES_REQUEST,\n} from \"../reducers/post\";\n\nfunction PostForm() {\n  const imageInput = useRef();\n  const dispatch = useDispatch();\n  const { addPostDone, addPostLoading } = useSelector((state) => state.post);\n  const { imagePaths } = useSelector((state) => state.post);\n  const [text, onChangeText, setText] = useInput(\"\");\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n\n  const onClickImageUpload = useCallback(\n    (e) => {\n      imageInput.current.click();\n    },\n    [imageInput.current]\n  );\n\n  const onChangeImage = useCallback((e) => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    });\n  }, []);\n  const onRemoveImage = useCallback(\n    (index) => () => {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index,\n      });\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"포스트 입력\"\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImage}\n        />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={addPostLoading}\n        >\n          등록\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n}\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}