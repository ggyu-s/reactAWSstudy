{"ast":null,"code":"import { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PostForm() {\n  const imageInput = useRef();\n  const dispatch = useDispatch();\n  const {\n    addPostDone,\n    addPostLoading\n  } = useSelector(state => state.post);\n  const {\n    imagePaths\n  } = useSelector(state => state.post);\n  const [text, onChangeText, setText] = useInput(\"\");\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onClickImageUpload = useCallback(e => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImage = useCallback(e => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uD3EC\\uC2A4\\uD2B8 \\uC785\\uB825\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImage\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          float: \"right\"\n        },\n        htmlType: \"submit\",\n        loading: addPostLoading,\n        children: \"\\uB4F1\\uB85D\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths.map((v, i) => /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: \"inline-block\"\n        },\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: `http://localhost:3065/${v}`,\n          style: {\n            width: \"200px\"\n          },\n          alt: v\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: onRemoveImage(i),\n            children: \"\\uC81C\\uAC70\"\n          })\n        })]\n      }, v))\n    })]\n  });\n}\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/components/PostForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useRef","useDispatch","useSelector","useInput","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","imageInput","dispatch","addPostDone","addPostLoading","state","post","imagePaths","text","onChangeText","setText","onSubmit","formData","FormData","forEach","p","append","type","data","onClickImageUpload","e","current","click","onChangeImage","imageFormData","call","target","files","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport {\n  ADD_POST_REQUEST,\n  REMOVE_IMAGE,\n  UPLOAD_IMAGES_REQUEST,\n} from \"../reducers/post\";\n\nfunction PostForm() {\n  const imageInput = useRef();\n  const dispatch = useDispatch();\n  const { addPostDone, addPostLoading } = useSelector((state) => state.post);\n  const { imagePaths } = useSelector((state) => state.post);\n  const [text, onChangeText, setText] = useInput(\"\");\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach((p) => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData,\n    });\n  }, [text, imagePaths]);\n\n  const onClickImageUpload = useCallback(\n    (e) => {\n      imageInput.current.click();\n    },\n    [imageInput.current]\n  );\n\n  const onChangeImage = useCallback((e) => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, (f) => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData,\n    });\n  }, []);\n  const onRemoveImage = useCallback(\n    (index) => () => {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index,\n      });\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"포스트 입력\"\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImage}\n        />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={addPostLoading}\n        >\n          등록\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3065/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button onClick={onRemoveImage(i)}>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n}\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}