{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(post);\n\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/post\");\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME\n          });\n\n        case 8:\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction post() {\n  return _regeneratorRuntime.wrap(function post$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoadPosts), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default post;","map":{"version":3,"sources":["/Users/ggyu/Library/Mobile Documents/com~apple~CloudDocs/My/Front/reactnodestudy/front/sagas/post.js"],"names":["loadPosts","addPost","addComment","removePost","watchLoadPosts","watchAddPost","watchAddComment","watchRemovePost","post","all","delay","fork","put","takeLatest","throttle","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","action","type","data","response","addPostAPI","call","result","console","log","addCommentAPI","removePostAPI","error"],"mappings":"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","sourcesContent":["import {\n  all,\n  delay,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  generateDummyPost,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/post\");\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* post() {\n  yield all([\n    fork(watchLoadPosts),\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n  ]);\n}\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}