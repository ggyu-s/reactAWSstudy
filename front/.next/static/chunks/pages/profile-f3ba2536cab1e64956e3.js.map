{"version":3,"sources":["webpack://_N_E/./node_modules/dequal/lite/index.mjs","webpack://_N_E/./node_modules/swr/esm/libs/hash.js","webpack://_N_E/./node_modules/swr/esm/cache.js","webpack://_N_E/./node_modules/swr/esm/libs/web-preset.js","webpack://_N_E/./node_modules/swr/esm/config.js","webpack://_N_E/./node_modules/swr/esm/env.js","webpack://_N_E/./node_modules/swr/esm/swr-config-context.js","webpack://_N_E/./node_modules/swr/esm/use-swr.js","webpack://_N_E/./node_modules/swr/esm/index.js","webpack://_N_E/./components/NicknameEditForm.js","webpack://_N_E/./node_modules/@ant-design/icons-svg/es/asn/StopOutlined.js","webpack://_N_E/./node_modules/@ant-design/icons/es/icons/StopOutlined.js","webpack://_N_E/./components/FollowList.js","webpack://_N_E/./pages/profile.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?af25"],"names":["has","Object","prototype","hasOwnProperty","table","WeakMap","counter","Cache","initialData","this","cache","Map","entries","subs","get","key","_key","serializeKey","set","value","notify","keys","Array","from","clear","delete","args","err","isArray","length","i","_hash","String","hash","subscribe","listener","_this","Error","isSubscribed","push","index","indexOf","_i","_a","online","isOnline","isDocumentVisible","document","undefined","visibilityState","fetcher","url","fetch","then","res","json","registerOnFocus","cb","window","addEventListener","registerOnReconnect","__assign","assign","t","s","n","arguments","p","call","apply","slowConnection","navigator","effectiveType","onLoadingSlow","onSuccess","onError","onErrorRetry","_","__","config","revalidate","opts","errorRetryCount","retryCount","count","Math","min","timeout","random","errorRetryInterval","setTimeout","focusThrottleInterval","dedupingInterval","loadingTimeout","refreshInterval","revalidateOnFocus","revalidateOnReconnect","refreshWhenHidden","refreshWhenOffline","shouldRetryOnError","suspense","compare","dequal","foo","bar","ctor","len","constructor","Date","getTime","RegExp","toString","isPaused","IS_SERVER","Deno","version","deno","SWRConfigContext","displayName","FOCUS_REVALIDATORS","RECONNECT_REVALIDATORS","ts","revalidate_1","revalidators","defineProperty","Provider","NicknameEditForm","me","useSelector","state","user","useInput","nickname","onChangeNickname","dispatch","useDispatch","style","useMemo","marginBottom","border","padding","onSubmit","useCallback","type","CHANGE_NICKNAME_REQUEST","data","Search","addonBefore","enterButton","onChange","onSearch","props","ref","AntdIcon","icon","FollowList","header","onClickMore","loading","grid","gutter","xs","md","size","loadMore","textAlign","margin","onClick","bordered","dataSource","renderItem","item","Item","marginTop","actions","id","UNFOLLOW_REQUEST","REMOVE_FOLLOWER_REQUEST","Meta","description","Profile","loadFollowersLoading","loadFollowingsLoading","useState","followersLimit","setFollowersLimit","followingsLimit","setFollowingsLimit","useEffect","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","prev","loadMoreFollowings","loadMoreFollowers","Router","charSet","AppLayout","Followings","Followers","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/profile-f3ba2536cab1e64956e3.js","sourcesContent":["var has = Object.prototype.hasOwnProperty;\n\nexport function dequal(foo, bar) {\n\tvar ctor, len;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\n// counter of the key\nvar counter = 0;\n// hashes an array of objects and returns a string\nexport default function hash(args) {\n    if (!args.length)\n        return '';\n    var key = 'arg';\n    for (var i = 0; i < args.length; ++i) {\n        if (args[i] === null) {\n            key += '@null';\n            continue;\n        }\n        var _hash = void 0;\n        if (typeof args[i] !== 'object' && typeof args[i] !== 'function') {\n            // need to consider the case that args[i] is a string:\n            // args[i]        _hash\n            // \"undefined\" -> '\"undefined\"'\n            // undefined   -> 'undefined'\n            // 123         -> '123'\n            // \"null\"      -> '\"null\"'\n            if (typeof args[i] === 'string') {\n                _hash = '\"' + args[i] + '\"';\n            }\n            else {\n                _hash = String(args[i]);\n            }\n        }\n        else {\n            if (!table.has(args[i])) {\n                _hash = counter;\n                table.set(args[i], counter++);\n            }\n            else {\n                _hash = table.get(args[i]);\n            }\n        }\n        key += '@' + _hash;\n    }\n    return key;\n}\n","import hash from './libs/hash';\nvar Cache = /** @class */ (function () {\n    function Cache(initialData) {\n        if (initialData === void 0) { initialData = {}; }\n        this.cache = new Map(Object.entries(initialData));\n        this.subs = [];\n    }\n    Cache.prototype.get = function (key) {\n        var _key = this.serializeKey(key)[0];\n        return this.cache.get(_key);\n    };\n    Cache.prototype.set = function (key, value) {\n        var _key = this.serializeKey(key)[0];\n        this.cache.set(_key, value);\n        this.notify();\n    };\n    Cache.prototype.keys = function () {\n        return Array.from(this.cache.keys());\n    };\n    Cache.prototype.has = function (key) {\n        var _key = this.serializeKey(key)[0];\n        return this.cache.has(_key);\n    };\n    Cache.prototype.clear = function () {\n        this.cache.clear();\n        this.notify();\n    };\n    Cache.prototype.delete = function (key) {\n        var _key = this.serializeKey(key)[0];\n        this.cache.delete(_key);\n        this.notify();\n    };\n    // TODO: introduce namespace for the cache\n    Cache.prototype.serializeKey = function (key) {\n        var args = null;\n        if (typeof key === 'function') {\n            try {\n                key = key();\n            }\n            catch (err) {\n                // dependencies not ready\n                key = '';\n            }\n        }\n        if (Array.isArray(key)) {\n            // args array\n            args = key;\n            key = hash(key);\n        }\n        else {\n            // convert null to ''\n            key = String(key || '');\n        }\n        var errorKey = key ? 'err@' + key : '';\n        var isValidatingKey = key ? 'validating@' + key : '';\n        return [key, args, errorKey, isValidatingKey];\n    };\n    Cache.prototype.subscribe = function (listener) {\n        var _this = this;\n        if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n        }\n        var isSubscribed = true;\n        this.subs.push(listener);\n        return function () {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            var index = _this.subs.indexOf(listener);\n            if (index > -1) {\n                _this.subs[index] = _this.subs[_this.subs.length - 1];\n                _this.subs.length--;\n            }\n        };\n    };\n    // Notify Cache subscribers about a change in the cache\n    Cache.prototype.notify = function () {\n        for (var _i = 0, _a = this.subs; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener();\n        }\n    };\n    return Cache;\n}());\nexport default Cache;\n","/**\n * Due to bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a work around, we always assume it's online on first load, and change\n * the status upon `online` or `offline` events.\n */\nvar online = true;\nvar isOnline = function () { return online; };\nvar isDocumentVisible = function () {\n    if (typeof document !== 'undefined' &&\n        document.visibilityState !== undefined) {\n        return document.visibilityState !== 'hidden';\n    }\n    // always assume it's visible\n    return true;\n};\nvar fetcher = function (url) { return fetch(url).then(function (res) { return res.json(); }); };\nvar registerOnFocus = function (cb) {\n    if (typeof window !== 'undefined' &&\n        window.addEventListener !== undefined &&\n        typeof document !== 'undefined' &&\n        document.addEventListener !== undefined) {\n        // focus revalidate\n        document.addEventListener('visibilitychange', function () { return cb(); }, false);\n        window.addEventListener('focus', function () { return cb(); }, false);\n    }\n};\nvar registerOnReconnect = function (cb) {\n    if (typeof window !== 'undefined' && window.addEventListener !== undefined) {\n        // reconnect revalidate\n        window.addEventListener('online', function () {\n            online = true;\n            cb();\n        }, false);\n        // nothing to revalidate, just update the status\n        window.addEventListener('offline', function () { return (online = false); }, false);\n    }\n};\nexport default {\n    isOnline: isOnline,\n    isDocumentVisible: isDocumentVisible,\n    fetcher: fetcher,\n    registerOnFocus: registerOnFocus,\n    registerOnReconnect: registerOnReconnect\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { dequal } from 'dequal/lite';\nimport Cache from './cache';\nimport webPreset from './libs/web-preset';\n// cache\nvar cache = new Cache();\n// error retry\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n    if (!config.isDocumentVisible()) {\n        // if it's hidden, stop\n        // it will auto revalidate when focus\n        return;\n    }\n    if (typeof config.errorRetryCount === 'number' &&\n        opts.retryCount > config.errorRetryCount) {\n        return;\n    }\n    // exponential backoff\n    var count = Math.min(opts.retryCount, 8);\n    var timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n    setTimeout(revalidate, timeout, opts);\n}\n// client side: need to adjust the config\n// based on the browser status\n// slow connection (<= 70Kbps)\nvar slowConnection = typeof window !== 'undefined' &&\n    // @ts-ignore\n    navigator['connection'] &&\n    // @ts-ignore\n    ['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1;\n// config\nvar defaultConfig = __assign({ \n    // events\n    onLoadingSlow: function () { }, onSuccess: function () { }, onError: function () { }, onErrorRetry: onErrorRetry, errorRetryInterval: (slowConnection ? 10 : 5) * 1000, focusThrottleInterval: 5 * 1000, dedupingInterval: 2 * 1000, loadingTimeout: (slowConnection ? 5 : 3) * 1000, refreshInterval: 0, revalidateOnFocus: true, revalidateOnReconnect: true, refreshWhenHidden: false, refreshWhenOffline: false, shouldRetryOnError: true, suspense: false, compare: dequal, isPaused: function () { return false; } }, webPreset);\nexport { cache };\nexport default defaultConfig;\n","import { useEffect, useLayoutEffect } from 'react';\nexport var IS_SERVER = typeof window === 'undefined' ||\n    // @ts-ignore\n    !!(typeof Deno !== 'undefined' && Deno && Deno.version && Deno.version.deno);\n// polyfill for requestAnimationFrame\nexport var rAF = IS_SERVER\n    ? null\n    : window['requestAnimationFrame']\n        ? function (f) { return window['requestAnimationFrame'](f); }\n        : function (f) { return setTimeout(f, 1); };\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nexport var useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n","import { createContext } from 'react';\nvar SWRConfigContext = createContext({});\nSWRConfigContext.displayName = 'SWRConfigContext';\nexport default SWRConfigContext;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n// TODO: use @ts-expect-error\nimport { useCallback, useContext, useState, useRef, useMemo, useDebugValue } from 'react';\nimport defaultConfig, { cache } from './config';\nimport { IS_SERVER, rAF, useIsomorphicLayoutEffect } from './env';\nimport SWRConfigContext from './swr-config-context';\n// global state managers\nvar CONCURRENT_PROMISES = {};\nvar CONCURRENT_PROMISES_TS = {};\nvar FOCUS_REVALIDATORS = {};\nvar RECONNECT_REVALIDATORS = {};\nvar CACHE_REVALIDATORS = {};\nvar MUTATION_TS = {};\nvar MUTATION_END_TS = {};\n// generate strictly increasing timestamps\nvar now = (function () {\n    var ts = 0;\n    return function () { return ++ts; };\n})();\n// setup DOM events listeners for `focus` and `reconnect` actions\nif (!IS_SERVER) {\n    var revalidate_1 = function (revalidators) {\n        if (!defaultConfig.isDocumentVisible() || !defaultConfig.isOnline())\n            return;\n        for (var key in revalidators) {\n            if (revalidators[key][0])\n                revalidators[key][0]();\n        }\n    };\n    if (typeof defaultConfig.registerOnFocus === 'function') {\n        defaultConfig.registerOnFocus(function () { return revalidate_1(FOCUS_REVALIDATORS); });\n    }\n    if (typeof defaultConfig.registerOnReconnect === 'function') {\n        defaultConfig.registerOnReconnect(function () { return revalidate_1(RECONNECT_REVALIDATORS); });\n    }\n}\nvar trigger = function (_key, shouldRevalidate) {\n    if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n    // we are ignoring the second argument which correspond to the arguments\n    // the fetcher will receive when key is an array\n    var _a = cache.serializeKey(_key), key = _a[0], keyErr = _a[2], keyValidating = _a[3];\n    if (!key)\n        return Promise.resolve();\n    var updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        var currentData = cache.get(key);\n        var currentError = cache.get(keyErr);\n        var currentIsValidating = cache.get(keyValidating);\n        var promises = [];\n        for (var i = 0; i < updaters.length; ++i) {\n            promises.push(updaters[i](shouldRevalidate, currentData, currentError, currentIsValidating, i > 0));\n        }\n        // return new updated value\n        return Promise.all(promises).then(function () { return cache.get(key); });\n    }\n    return Promise.resolve(cache.get(key));\n};\nvar broadcastState = function (key, data, error, isValidating) {\n    var updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        for (var i = 0; i < updaters.length; ++i) {\n            updaters[i](false, data, error, isValidating);\n        }\n    }\n};\nvar mutate = function (_key, _data, shouldRevalidate) {\n    if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var _a, key, keyErr, beforeMutationTs, beforeConcurrentPromisesTs, data, error, isAsyncMutation, err_1, shouldAbort, updaters, promises, i;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = cache.serializeKey(_key), key = _a[0], keyErr = _a[2];\n                    if (!key)\n                        return [2 /*return*/];\n                    // if there is no new data to update, let's just revalidate the key\n                    if (typeof _data === 'undefined')\n                        return [2 /*return*/, trigger(_key, shouldRevalidate)\n                            // update global timestamps\n                        ];\n                    // update global timestamps\n                    MUTATION_TS[key] = now() - 1;\n                    MUTATION_END_TS[key] = 0;\n                    beforeMutationTs = MUTATION_TS[key];\n                    beforeConcurrentPromisesTs = CONCURRENT_PROMISES_TS[key];\n                    isAsyncMutation = false;\n                    if (_data && typeof _data === 'function') {\n                        // `_data` is a function, call it passing current cache value\n                        try {\n                            _data = _data(cache.get(key));\n                        }\n                        catch (err) {\n                            // if `_data` function throws an error synchronously, it shouldn't be cached\n                            _data = undefined;\n                            error = err;\n                        }\n                    }\n                    if (!(_data && typeof _data.then === 'function')) return [3 /*break*/, 5];\n                    // `_data` is a promise\n                    isAsyncMutation = true;\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, _data];\n                case 2:\n                    data = _b.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    err_1 = _b.sent();\n                    error = err_1;\n                    return [3 /*break*/, 4];\n                case 4: return [3 /*break*/, 6];\n                case 5:\n                    data = _data;\n                    _b.label = 6;\n                case 6:\n                    shouldAbort = function () {\n                        // check if other mutations have occurred since we've started this mutation\n                        if (beforeMutationTs !== MUTATION_TS[key] ||\n                            beforeConcurrentPromisesTs !== CONCURRENT_PROMISES_TS[key]) {\n                            if (error)\n                                throw error;\n                            return true;\n                        }\n                    };\n                    // if there's a race we don't update cache or broadcast change, just return the data\n                    if (shouldAbort())\n                        return [2 /*return*/, data];\n                    if (typeof data !== 'undefined') {\n                        // update cached data\n                        cache.set(key, data);\n                    }\n                    // always update or reset the error\n                    cache.set(keyErr, error);\n                    // reset the timestamp to mark the mutation has ended\n                    MUTATION_END_TS[key] = now() - 1;\n                    if (!isAsyncMutation) {\n                        // we skip broadcasting if there's another mutation happened synchronously\n                        if (shouldAbort())\n                            return [2 /*return*/, data];\n                    }\n                    updaters = CACHE_REVALIDATORS[key];\n                    if (updaters) {\n                        promises = [];\n                        for (i = 0; i < updaters.length; ++i) {\n                            promises.push(updaters[i](!!shouldRevalidate, data, error, undefined, i > 0));\n                        }\n                        // return new updated value\n                        return [2 /*return*/, Promise.all(promises).then(function () {\n                                if (error)\n                                    throw error;\n                                return cache.get(key);\n                            })];\n                    }\n                    // throw error or return data to be used by caller of mutate\n                    if (error)\n                        throw error;\n                    return [2 /*return*/, data];\n            }\n        });\n    });\n};\nfunction useSWR() {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var _key = args[0];\n    var config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), args.length > 2\n        ? args[2]\n        : args.length === 2 && typeof args[1] === 'object'\n            ? args[1]\n            : {});\n    // in typescript args.length > 2 is not same as args.lenth === 3\n    // we do a safe type assertion here\n    // args.length === 3\n    var fn = (args.length > 2\n        ? args[1]\n        : args.length === 2 && typeof args[1] === 'function'\n            ? args[1]\n            : /**\n                  pass fn as null will disable revalidate\n                  https://paco.sh/blog/shared-hook-state-with-swr\n                */\n                args[1] === null\n                    ? args[1]\n                    : config.fetcher);\n    // we assume `key` as the identifier of the request\n    // `key` can change but `fn` shouldn't\n    // (because `revalidate` only depends on `key`)\n    // `keyErr` is the cache key for error objects\n    var _a = cache.serializeKey(_key), key = _a[0], fnArgs = _a[1], keyErr = _a[2], keyValidating = _a[3];\n    var configRef = useRef(config);\n    useIsomorphicLayoutEffect(function () {\n        configRef.current = config;\n    });\n    var willRevalidateOnMount = function () {\n        return (config.revalidateOnMount ||\n            (!config.initialData && config.revalidateOnMount === undefined));\n    };\n    var resolveData = function () {\n        var cachedData = cache.get(key);\n        return typeof cachedData === 'undefined' ? config.initialData : cachedData;\n    };\n    var resolveIsValidating = function () {\n        return !!cache.get(keyValidating) || (key && willRevalidateOnMount());\n    };\n    var initialData = resolveData();\n    var initialError = cache.get(keyErr);\n    var initialIsValidating = resolveIsValidating();\n    // if a state is accessed (data, error or isValidating),\n    // we add the state to dependencies so if the state is\n    // updated in the future, we can trigger a rerender\n    var stateDependencies = useRef({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    var stateRef = useRef({\n        data: initialData,\n        error: initialError,\n        isValidating: initialIsValidating\n    });\n    // display the data label in the React DevTools next to SWR hooks\n    useDebugValue(stateRef.current.data);\n    var rerender = useState({})[1];\n    var dispatch = useCallback(function (payload) {\n        var shouldUpdateState = false;\n        for (var k in payload) {\n            // @ts-ignore\n            if (stateRef.current[k] === payload[k]) {\n                continue;\n            }\n            // @ts-ignore\n            stateRef.current[k] = payload[k];\n            // @ts-ignore\n            if (stateDependencies.current[k]) {\n                shouldUpdateState = true;\n            }\n        }\n        if (shouldUpdateState) {\n            // if component is unmounted, should skip rerender\n            // if component is not mounted, should skip rerender\n            if (unmountedRef.current || !initialMountedRef.current)\n                return;\n            rerender({});\n        }\n    }, \n    // config.suspense isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // error ref inside revalidate (is last request errored?)\n    var unmountedRef = useRef(false);\n    var keyRef = useRef(key);\n    // check if component is mounted in suspense mode\n    var initialMountedRef = useRef(false);\n    // do unmount check for callbacks\n    var eventsCallback = useCallback(function (event) {\n        var _a;\n        var params = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            params[_i - 1] = arguments[_i];\n        }\n        if (unmountedRef.current)\n            return;\n        if (!initialMountedRef.current)\n            return;\n        if (key !== keyRef.current)\n            return;\n        // @ts-ignore\n        (_a = configRef.current)[event].apply(_a, params);\n    }, [key]);\n    var boundMutate = useCallback(function (data, shouldRevalidate) {\n        return mutate(keyRef.current, data, shouldRevalidate);\n    }, []);\n    var addRevalidator = function (revalidators, callback) {\n        if (!revalidators[key]) {\n            revalidators[key] = [callback];\n        }\n        else {\n            revalidators[key].push(callback);\n        }\n        return function () {\n            var keyedRevalidators = revalidators[key];\n            var index = keyedRevalidators.indexOf(callback);\n            if (index >= 0) {\n                // O(1): faster than splice\n                keyedRevalidators[index] =\n                    keyedRevalidators[keyedRevalidators.length - 1];\n                keyedRevalidators.pop();\n            }\n        };\n    };\n    // start a revalidation\n    var revalidate = useCallback(function (revalidateOpts) {\n        if (revalidateOpts === void 0) { revalidateOpts = {}; }\n        return __awaiter(_this, void 0, void 0, function () {\n            var _a, retryCount, _b, dedupe, loading, shouldDeduping, newData, startAt, newState, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!key || !fn)\n                            return [2 /*return*/, false];\n                        if (unmountedRef.current)\n                            return [2 /*return*/, false];\n                        if (configRef.current.isPaused())\n                            return [2 /*return*/, false];\n                        _a = revalidateOpts.retryCount, retryCount = _a === void 0 ? 0 : _a, _b = revalidateOpts.dedupe, dedupe = _b === void 0 ? false : _b;\n                        loading = true;\n                        shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && dedupe;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 6, , 7]);\n                        dispatch({\n                            isValidating: true\n                        });\n                        cache.set(keyValidating, true);\n                        if (!shouldDeduping) {\n                            // also update other hooks\n                            broadcastState(key, stateRef.current.data, stateRef.current.error, true);\n                        }\n                        newData = void 0;\n                        startAt = void 0;\n                        if (!shouldDeduping) return [3 /*break*/, 3];\n                        // there's already an ongoing request,\n                        // this one needs to be deduplicated.\n                        startAt = CONCURRENT_PROMISES_TS[key];\n                        return [4 /*yield*/, CONCURRENT_PROMISES[key]];\n                    case 2:\n                        newData = _c.sent();\n                        return [3 /*break*/, 5];\n                    case 3:\n                        // if no cache being rendered currently (it shows a blank page),\n                        // we trigger the loading slow event.\n                        if (config.loadingTimeout && !cache.get(key)) {\n                            setTimeout(function () {\n                                if (loading)\n                                    eventsCallback('onLoadingSlow', key, config);\n                            }, config.loadingTimeout);\n                        }\n                        if (fnArgs !== null) {\n                            CONCURRENT_PROMISES[key] = fn.apply(void 0, fnArgs);\n                        }\n                        else {\n                            CONCURRENT_PROMISES[key] = fn(key);\n                        }\n                        CONCURRENT_PROMISES_TS[key] = startAt = now();\n                        return [4 /*yield*/, CONCURRENT_PROMISES[key]];\n                    case 4:\n                        newData = _c.sent();\n                        setTimeout(function () {\n                            delete CONCURRENT_PROMISES[key];\n                            delete CONCURRENT_PROMISES_TS[key];\n                        }, config.dedupingInterval);\n                        // trigger the success event,\n                        // only do this for the original request.\n                        eventsCallback('onSuccess', newData, key, config);\n                        _c.label = 5;\n                    case 5:\n                        // if there're other ongoing request(s), started after the current one,\n                        // we need to ignore the current one to avoid possible race conditions:\n                        //   req1------------------>res1        (current one)\n                        //        req2---------------->res2\n                        // the request that fired later will always be kept.\n                        if (CONCURRENT_PROMISES_TS[key] > startAt) {\n                            return [2 /*return*/, false];\n                        }\n                        // if there're other mutations(s), overlapped with the current revalidation:\n                        // case 1:\n                        //   req------------------>res\n                        //       mutate------>end\n                        // case 2:\n                        //         req------------>res\n                        //   mutate------>end\n                        // case 3:\n                        //   req------------------>res\n                        //       mutate-------...---------->\n                        // we have to ignore the revalidation result (res) because it's no longer fresh.\n                        // meanwhile, a new revalidation should be triggered when the mutation ends.\n                        if (MUTATION_TS[key] &&\n                            // case 1\n                            (startAt <= MUTATION_TS[key] ||\n                                // case 2\n                                startAt <= MUTATION_END_TS[key] ||\n                                // case 3\n                                MUTATION_END_TS[key] === 0)) {\n                            dispatch({ isValidating: false });\n                            return [2 /*return*/, false];\n                        }\n                        cache.set(keyErr, undefined);\n                        cache.set(keyValidating, false);\n                        newState = {\n                            isValidating: false\n                        };\n                        if (typeof stateRef.current.error !== 'undefined') {\n                            // we don't have an error\n                            newState.error = undefined;\n                        }\n                        if (!config.compare(stateRef.current.data, newData)) {\n                            // deep compare to avoid extra re-render\n                            // data changed\n                            newState.data = newData;\n                            cache.set(key, newData);\n                        }\n                        // merge the new state\n                        dispatch(newState);\n                        if (!shouldDeduping) {\n                            // also update other hooks\n                            broadcastState(key, newData, newState.error, false);\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        err_2 = _c.sent();\n                        delete CONCURRENT_PROMISES[key];\n                        delete CONCURRENT_PROMISES_TS[key];\n                        if (configRef.current.isPaused()) {\n                            dispatch({\n                                isValidating: false\n                            });\n                            return [2 /*return*/, false];\n                        }\n                        cache.set(keyErr, err_2);\n                        // get a new error\n                        // don't use deep equal for errors\n                        if (stateRef.current.error !== err_2) {\n                            // we keep the stale data\n                            dispatch({\n                                isValidating: false,\n                                error: err_2\n                            });\n                            if (!shouldDeduping) {\n                                // also broadcast to update other hooks\n                                broadcastState(key, undefined, err_2, false);\n                            }\n                        }\n                        // events and retry\n                        eventsCallback('onError', err_2, key, config);\n                        if (config.shouldRetryOnError) {\n                            // when retrying, we always enable deduping\n                            eventsCallback('onErrorRetry', err_2, key, config, revalidate, {\n                                retryCount: retryCount + 1,\n                                dedupe: true\n                            });\n                        }\n                        return [3 /*break*/, 7];\n                    case 7:\n                        loading = false;\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    }, \n    // dispatch is immutable, and `eventsCallback`, `fnArgs`, `keyErr`, and `keyValidating` are based on `key`,\n    // so we can them from the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // useSWR('key', () => fetch('/api/'), { suspense: true })\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key]);\n    // mounted (client side rendering)\n    useIsomorphicLayoutEffect(function () {\n        if (!key)\n            return undefined;\n        // after `key` updates, we need to mark it as mounted\n        unmountedRef.current = false;\n        var isUpdating = initialMountedRef.current;\n        initialMountedRef.current = true;\n        // after the component is mounted (hydrated),\n        // we need to update the data from the cache\n        // and trigger a revalidation\n        var currentHookData = stateRef.current.data;\n        var latestKeyedData = resolveData();\n        // update the state if the key changed (not the inital render) or cache updated\n        keyRef.current = key;\n        if (!config.compare(currentHookData, latestKeyedData)) {\n            dispatch({ data: latestKeyedData });\n        }\n        // revalidate with deduping\n        var softRevalidate = function () { return revalidate({ dedupe: true }); };\n        // trigger a revalidation\n        if (isUpdating || willRevalidateOnMount()) {\n            if (typeof latestKeyedData !== 'undefined' && !IS_SERVER) {\n                // delay revalidate if there's cache\n                // to not block the rendering\n                // @ts-ignore it's safe to use requestAnimationFrame in browser\n                rAF(softRevalidate);\n            }\n            else {\n                softRevalidate();\n            }\n        }\n        var pending = false;\n        var onFocus = function () {\n            if (pending || !configRef.current.revalidateOnFocus)\n                return;\n            pending = true;\n            softRevalidate();\n            setTimeout(function () { return (pending = false); }, configRef.current.focusThrottleInterval);\n        };\n        var onReconnect = function () {\n            if (configRef.current.revalidateOnReconnect) {\n                softRevalidate();\n            }\n        };\n        // register global cache update listener\n        var onUpdate = function (shouldRevalidate, updatedData, updatedError, updatedIsValidating, dedupe) {\n            if (shouldRevalidate === void 0) { shouldRevalidate = true; }\n            if (dedupe === void 0) { dedupe = true; }\n            // update hook state\n            var newState = {};\n            var needUpdate = false;\n            if (typeof updatedData !== 'undefined' &&\n                !config.compare(stateRef.current.data, updatedData)) {\n                newState.data = updatedData;\n                needUpdate = true;\n            }\n            // always update error\n            // because it can be `undefined`\n            if (stateRef.current.error !== updatedError) {\n                newState.error = updatedError;\n                needUpdate = true;\n            }\n            if (typeof updatedIsValidating !== 'undefined' &&\n                stateRef.current.isValidating !== updatedIsValidating) {\n                newState.isValidating = updatedIsValidating;\n                needUpdate = true;\n            }\n            if (needUpdate) {\n                dispatch(newState);\n            }\n            if (shouldRevalidate) {\n                if (dedupe) {\n                    return softRevalidate();\n                }\n                else {\n                    return revalidate();\n                }\n            }\n            return false;\n        };\n        var unsubFocus = addRevalidator(FOCUS_REVALIDATORS, onFocus);\n        var unsubReconnect = addRevalidator(RECONNECT_REVALIDATORS, onReconnect);\n        var unsubUpdate = addRevalidator(CACHE_REVALIDATORS, onUpdate);\n        return function () {\n            // cleanup\n            dispatch = function () { return null; };\n            // mark it as unmounted\n            unmountedRef.current = true;\n            unsubFocus();\n            unsubReconnect();\n            unsubUpdate();\n        };\n    }, [key, revalidate]);\n    useIsomorphicLayoutEffect(function () {\n        var timer = null;\n        var tick = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!stateRef.current.error &&\n                            (configRef.current.refreshWhenHidden ||\n                                configRef.current.isDocumentVisible()) &&\n                            (configRef.current.refreshWhenOffline || configRef.current.isOnline()))) return [3 /*break*/, 2];\n                        // only revalidate when the page is visible\n                        // if API request errored, we stop polling in this round\n                        // and let the error retry function handle it\n                        return [4 /*yield*/, revalidate({ dedupe: true })];\n                    case 1:\n                        // only revalidate when the page is visible\n                        // if API request errored, we stop polling in this round\n                        // and let the error retry function handle it\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // Read the latest refreshInterval\n                        if (configRef.current.refreshInterval && timer) {\n                            timer = setTimeout(tick, configRef.current.refreshInterval);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        if (configRef.current.refreshInterval) {\n            timer = setTimeout(tick, configRef.current.refreshInterval);\n        }\n        return function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n    }, [\n        config.refreshInterval,\n        config.refreshWhenHidden,\n        config.refreshWhenOffline,\n        revalidate\n    ]);\n    // suspense\n    var latestData;\n    var latestError;\n    if (config.suspense) {\n        // in suspense mode, we can't return empty state\n        // (it should be suspended)\n        // try to get data and error from cache\n        latestData = cache.get(key);\n        latestError = cache.get(keyErr);\n        if (typeof latestData === 'undefined') {\n            latestData = initialData;\n        }\n        if (typeof latestError === 'undefined') {\n            latestError = initialError;\n        }\n        if (typeof latestData === 'undefined' &&\n            typeof latestError === 'undefined') {\n            // need to start the request if it hasn't\n            if (!CONCURRENT_PROMISES[key]) {\n                // trigger revalidate immediately\n                // to get the promise\n                // in this revalidate, should not rerender\n                revalidate();\n            }\n            if (CONCURRENT_PROMISES[key] &&\n                typeof CONCURRENT_PROMISES[key].then === 'function') {\n                // if it is a promise\n                throw CONCURRENT_PROMISES[key];\n            }\n            // it's a value, return it directly (override)\n            latestData = CONCURRENT_PROMISES[key];\n        }\n        if (typeof latestData === 'undefined' && latestError) {\n            // in suspense mode, throw error if there's no content\n            throw latestError;\n        }\n    }\n    // define returned state\n    // can be memorized since the state is a ref\n    var memoizedState = useMemo(function () {\n        // revalidate will be deprecated in the 1.x release\n        // because mutate() covers the same use case of revalidate().\n        // This remains only for backward compatibility\n        var state = { revalidate: revalidate, mutate: boundMutate };\n        Object.defineProperties(state, {\n            error: {\n                // `key` might be changed in the upcoming hook re-render,\n                // but the previous state will stay\n                // so we need to match the latest key and data (fallback to `initialData`)\n                get: function () {\n                    stateDependencies.current.error = true;\n                    if (config.suspense) {\n                        return latestError;\n                    }\n                    return keyRef.current === key ? stateRef.current.error : initialError;\n                },\n                enumerable: true\n            },\n            data: {\n                get: function () {\n                    stateDependencies.current.data = true;\n                    if (config.suspense) {\n                        return latestData;\n                    }\n                    return keyRef.current === key ? stateRef.current.data : initialData;\n                },\n                enumerable: true\n            },\n            isValidating: {\n                get: function () {\n                    stateDependencies.current.isValidating = true;\n                    return key ? stateRef.current.isValidating : false;\n                },\n                enumerable: true\n            }\n        });\n        return state;\n        // `config.suspense` isn't allowed to change during the lifecycle.\n        // `boundMutate` is immutable, and the immutability of `revalidate` depends on `key`\n        // so we can omit them from the deps array,\n        // but we put it to enable react-hooks/exhaustive-deps rule.\n        // `initialData` and `initialError` are not initial values\n        // because they are changed during the lifecycle\n        // so we should add them in the deps array.\n    }, [\n        revalidate,\n        initialData,\n        initialError,\n        boundMutate,\n        key,\n        config.suspense,\n        latestError,\n        latestData\n    ]);\n    return memoizedState;\n}\nObject.defineProperty(SWRConfigContext.Provider, 'default', {\n    value: defaultConfig\n});\nvar SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;\n","// `useSWR` and related APIs\nimport { default as useSWR } from './use-swr';\nexport default useSWR;\nexport * from './use-swr';\n// `useSWRInfinite`\nexport { useSWRInfinite } from './use-swr-infinite';\n// Cache related, to be replaced by the new APIs\nexport { cache } from './config';\n","import { Form, Input } from \"antd\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { CHANGE_NICKNAME_REQUEST } from \"../reducers/user\";\n\nfunction NicknameEditForm() {\n  const { me } = useSelector((state) => state.user);\n  const [nickname, onChangeNickname] = useInput(me?.nickname || \"\");\n  const dispatch = useDispatch();\n\n  const style = useMemo(\n    () => ({\n      marginBottom: \"20px\",\n      border: \"1px solid #d9d9d9\",\n      padding: \"20px\",\n    }),\n    []\n  );\n  const onSubmit = useCallback(() => {\n    dispatch({\n      type: CHANGE_NICKNAME_REQUEST,\n      data: nickname,\n    });\n  }, [nickname]);\n\n  return (\n    <Form style={style}>\n      <Input.Search\n        addonBefore=\"닉네임\"\n        enterButton=\"수정\"\n        value={nickname}\n        onChange={onChangeNickname}\n        onSearch={onSubmit}\n      />\n    </Form>\n  );\n}\n\nexport default NicknameEditForm;\n","// This icon file is generated automatically.\nvar StopOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372 0-89 31.3-170.8 83.5-234.8l523.3 523.3C682.8 852.7 601 884 512 884zm288.5-137.2L277.2 223.5C341.2 171.3 423 140 512 140c205.4 0 372 166.6 372 372 0 89-31.3 170.8-83.5 234.8z\" } }] }, \"name\": \"stop\", \"theme\": \"outlined\" };\nexport default StopOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport StopOutlinedSvg from \"@ant-design/icons-svg/es/asn/StopOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar StopOutlined = function StopOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: StopOutlinedSvg\n  }));\n};\n\nStopOutlined.displayName = 'StopOutlined';\nexport default /*#__PURE__*/React.forwardRef(StopOutlined);","import { Button, Card, List } from \"antd\";\nimport { StopOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { REMOVE_FOLLOWER_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\n\nfunction FollowList({ header, data, onClickMore, loading }) {\n  const dispatch = useDispatch();\n  const onClick = (id) => () => {\n    if (header === \"팔로잉\") {\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: id,\n      });\n    }\n    dispatch({\n      type: REMOVE_FOLLOWER_REQUEST,\n      data: id,\n    });\n  };\n  return (\n    <List\n      style={{ marginBottom: 20 }}\n      grid={{ gutter: 4, xs: 2, md: 3 }}\n      size=\"small\"\n      header={<div>{header}</div>}\n      loadMore={\n        <div style={{ textAlign: \"center\", margin: \"10px 0\" }}>\n          <Button onClick={onClickMore} loading={loading}>\n            더 보기\n          </Button>\n        </div>\n      }\n      bordered\n      dataSource={data}\n      renderItem={(item) => (\n        <List.Item style={{ marginTop: 20 }}>\n          <Card\n            actions={[<StopOutlined key=\"stop\" onClick={onClick(item.id)} />]}\n          >\n            <Card.Meta description={item.nickname} />\n          </Card>\n        </List.Item>\n      )}\n    />\n  );\n}\n\nFollowList.propTypes = {\n  header: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  onClickMore: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default FollowList;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Head from \"next/head\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport useSWR from \"swr\";\n\nimport {\n  LOAD_FOLLOWERS_REQUEST,\n  LOAD_FOLLOWINGS_REQUEST,\n  LOAD_MY_INFO_REQUEST,\n} from \"../reducers/user\";\n\nimport AppLayout from \"../components/AppLayout\";\nimport NicknameEditForm from \"../components/NicknameEditForm\";\nimport FollowList from \"../components/FollowList\";\nimport wrapper from \"../store/configureStore\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\n\nconst fetcher = (url) =>\n  axios.get(url, { withCredentials: true }).then((result) => {\n    console.log(result.data);\n    return result.data;\n  });\n\nfunction Profile() {\n  const dispatch = useDispatch();\n  const { me, loadFollowersLoading, loadFollowingsLoading } = useSelector(\n    (state) => state.user\n  );\n  // const { followers, error: followerError } = useSWR(\n  //   \"http://localhost:3065/user/f/followers\",\n  //   fetcher\n  // );\n  // const { followings } = useSWR(\n  //   \"http://localhost:3065/user/f/followings\",\n  //   fetcher\n  // );\n  const [followersLimit, setFollowersLimit] = useState(3);\n  const [followingsLimit, setFollowingsLimit] = useState(3);\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_FOLLOWERS_REQUEST,\n      data: followersLimit,\n    });\n    dispatch({\n      type: LOAD_FOLLOWINGS_REQUEST,\n      data: followingsLimit,\n    });\n    setFollowingsLimit((prev) => prev + 3);\n    setFollowersLimit((prev) => prev + 3);\n  }, []);\n\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit((prev) => prev + 3);\n    dispatch({\n      type: LOAD_FOLLOWINGS_REQUEST,\n      data: followingsLimit,\n    });\n  }, [followingsLimit]);\n\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit((prev) => prev + 3);\n    dispatch({\n      type: LOAD_FOLLOWERS_REQUEST,\n      data: followersLimit,\n    });\n  }, [followersLimit]);\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push(\"/\");\n    }\n  }, [me && me.id]);\n\n  // if (followerError || followingError) {\n  //   console.error(followingError || followerError);\n  //   return <div>팔로잉/팔로워 로딩 중 에러가 발생합니다.</div>;\n  // }\n\n  if (!me) {\n    return null;\n  }\n  return (\n    <>\n      <Head>\n        <meta charSet=\"utf-8\" />\n        <title>내프로필 NodeBird</title>\n      </Head>\n      <AppLayout>\n        <NicknameEditForm />\n        <FollowList\n          header=\"팔로잉\"\n          data={me.Followings}\n          onClickMore={loadMoreFollowings}\n          loading={loadFollowersLoading && loadFollowingsLoading}\n        />\n        <FollowList\n          header=\"팔로워\"\n          data={me.Followers}\n          onClickMore={loadMoreFollowers}\n          loading={loadFollowersLoading && loadFollowingsLoading}\n        />\n      </AppLayout>\n    </>\n  );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    axios.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default Profile;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/profile\",\n      function () {\n        return require(\"private-next-pages/profile.js\");\n      }\n    ]);\n  "],"sourceRoot":""}