{"version":3,"sources":["webpack://_N_E/../../../next-server/lib/amp.ts","webpack://_N_E/../../../next-server/lib/head.tsx","webpack://_N_E/../../../next-server/lib/head-manager-context.ts","webpack://_N_E/./pages/user/.js","webpack://_N_E/../../../next-server/lib/side-effect.tsx","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?e7a7","webpack://_N_E/../../../next-server/lib/amp-context.ts"],"names":["isInAmpMode","React","AmpStateContext","ampFirst","hybrid","hasQuery","defaultHead","inAmpMode","head","charSet","name","content","onlyReactElement","child","list","fragmentChild","fragmentList","METATYPES","reduceComponents","headElements","headElementChildren","headElement","props","keys","tags","metaTypes","metaCategories","h","isUnique","key","i","len","metatype","category","categories","unique","c","Head","ampState","useContext","headManager","HeadManagerContext","reduceComponentsToState","User","dispatch","useDispatch","id","useRouter","query","useSelector","state","post","mainPosts","hasMorePosts","loadPostsLoading","userInfo","user","useEffect","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","console","log","type","LOAD_USER_POSTS_REQUEST","lastId","length","data","addEventListener","removeEventListener","nickname","property","actions","Posts","Followings","Followers","Meta","avatar","title","map","constructor","_hasHeadManager","emitChange","componentDidMount","this","componentDidUpdate","componentWillUnmount","render","Component","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/user/[id]-4291670ecfe971736544.js","sourcesContent":["import React from 'react'\nimport { AmpStateContext } from './amp-context'\n\nexport function isInAmpMode({\n  ampFirst = false,\n  hybrid = false,\n  hasQuery = false,\n} = {}): boolean {\n  return ampFirst || (hybrid && hasQuery)\n}\n\nexport function useAmp(): boolean {\n  // Don't assign the context value to a variable to save bytes\n  return isInAmpMode(React.useContext(AmpStateContext))\n}\n","import React, { useContext } from 'react'\nimport Effect from './side-effect'\nimport { AmpStateContext } from './amp-context'\nimport { HeadManagerContext } from './head-manager-context'\nimport { isInAmpMode } from './amp'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" />]\n  if (!inAmpMode) {\n    head.push(<meta name=\"viewport\" content=\"width=device-width\" />)\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactChild\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      React.Children.toArray(child.props.children).reduce(\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactChild\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if (categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\nfunction reduceComponents(\n  headElements: Array<React.ReactElement<any>>,\n  props: WithInAmpMode\n) {\n  return headElements\n    .reduce(\n      (list: React.ReactChild[], headElement: React.ReactElement<any>) => {\n        const headElementChildren = React.Children.toArray(\n          headElement.props.children\n        )\n        return list.concat(headElementChildren)\n      },\n      []\n    )\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(props.inAmpMode))\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (process.env.__NEXT_OPTIMIZE_FONTS && !props.inAmpMode) {\n        if (\n          c.type === 'link' &&\n          c.props['href'] &&\n          // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n          ['https://fonts.googleapis.com/css'].some((url) =>\n            c.props['href'].startsWith(url)\n          )\n        ) {\n          const newProps = { ...(c.props || {}) }\n          newProps['data-href'] = newProps['href']\n          newProps['href'] = undefined\n          return React.cloneElement(c, newProps)\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const ampState = useContext(AmpStateContext)\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n      inAmpMode={isInAmpMode(ampState)}\n    >\n      {children}\n    </Effect>\n  )\n}\n\n// TODO: Remove in the next major release\nHead.rewind = () => {}\n\nexport default Head\n","import React from 'react'\n\nexport const HeadManagerContext: React.Context<{\n  updateHead?: (state: any) => void\n  mountedInstances?: any\n}> = React.createContext({})\n\nif (process.env.NODE_ENV !== 'production') {\n  HeadManagerContext.displayName = 'HeadManagerContext'\n}\n","import React, { useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, Card } from \"antd\";\nimport { END } from \"redux-saga\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\n\nimport AppLayout from \"../../components/AppLayout\";\nimport wrapper from \"../../store/configureStore\";\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from \"../../reducers/user\";\nimport PostCard from \"../../components/PostCard\";\nimport { LOAD_USER_POSTS_REQUEST } from \"../../reducers/post\";\n\nfunction User() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const { id } = router.query;\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(\n    (state) => state.post\n  );\n  const { userInfo } = useSelector((state) => state.user);\n\n  useEffect(() => {\n    function onScroll() {\n      if (\n        window.scrollY + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 300\n      ) {\n        if (hasMorePosts && !loadPostsLoading) {\n          console.log(hasMorePosts, loadPostsLoading);\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId:\n              mainPosts[mainPosts.length - 1] &&\n              mainPosts[mainPosts.length - 1].id,\n            data: id,\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, mainPosts.length, id, loadPostsLoading]);\n\n  return (\n    <>\n      <AppLayout>\n        {userInfo ? (\n          <>\n            <Head>\n              <title>{userInfo.nickname}님의 글</title>\n              <meta\n                name=\"description\"\n                content={`${userInfo.nickname}님의 게시글`}\n              />\n              <meta\n                property=\"og:title\"\n                content={`${userInfo.nickname}님의 게시글`}\n              />\n              <meta\n                property=\"og:description\"\n                content={`${userInfo.nickname}님의 게시글`}\n              />\n              <meta\n                property=\"og:image\"\n                content=\"https://nodebird.com/favicon.ico\"\n              />\n              <meta\n                property=\"og:url\"\n                content={`https://nodebird.com/user/${id}`}\n              />\n            </Head>\n            <Card\n              actions={[\n                <div key=\"twit\">\n                  트윗\n                  <br />\n                  {userInfo.Posts.length}\n                </div>,\n                <div key=\"followings\">\n                  팔로잉\n                  <br />\n                  {userInfo.Followings.length}\n                </div>,\n                <div key=\"followings\">\n                  팔로워\n                  <br /> {userInfo.Followers.length}\n                </div>,\n              ]}\n            >\n              <Card.Meta\n                avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                title={userInfo.nickname}\n              />\n            </Card>\n          </>\n        ) : null}\n        {mainPosts.map((c) => (\n          <PostCard key={c.id} post={c} />\n        ))}\n      </AppLayout>\n    </>\n  );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    axios.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: context.params.id,\n    });\n    context.store.dispatch({\n      type: LOAD_MY_INFO_REQUEST,\n    });\n    context.store.dispatch({\n      type: LOAD_USER_REQUEST,\n      data: context.params.id,\n    });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default User;\n","import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = JSX.Element[] | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  inAmpMode?: boolean\n}\n\nexport default class extends Component<SideEffectProps> {\n  private _hasHeadManager: boolean\n\n  emitChange = (): void => {\n    if (this._hasHeadManager) {\n      this.props.headManager.updateHead(\n        this.props.reduceComponentsToState(\n          [...this.props.headManager.mountedInstances],\n          this.props\n        )\n      )\n    }\n  }\n\n  constructor(props: any) {\n    super(props)\n    this._hasHeadManager =\n      this.props.headManager && this.props.headManager.mountedInstances\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n      this.emitChange()\n    }\n  }\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n    }\n    this.emitChange()\n  }\n  componentDidUpdate() {\n    this.emitChange()\n  }\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this)\n    }\n    this.emitChange()\n  }\n\n  render() {\n    return null\n  }\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/user/[id]\",\n      function () {\n        return require(\"private-next-pages/user/[id].js\");\n      }\n    ]);\n  ","import React from 'react'\n\nexport const AmpStateContext: React.Context<any> = React.createContext({})\n\nif (process.env.NODE_ENV !== 'production') {\n  AmpStateContext.displayName = 'AmpStateContext'\n}\n"],"sourceRoot":""}